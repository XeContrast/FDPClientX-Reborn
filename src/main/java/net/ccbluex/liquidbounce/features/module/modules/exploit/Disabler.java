/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayer;
import net.ccbluex.liquidbounce.api.minecraft.util.WBlockPos;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.MovementUtils;
import net.ccbluex.liquidbounce.utils.timer.MSTimer;
import net.ccbluex.liquidbounce.value.IntegerValue;
import net.ccbluex.liquidbounce.value.ListValue;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketInput;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerAbilities;
import net.minecraft.network.play.server.SPacketPlayerAbilities;
import net.minecraft.network.play.server.SPacketSpawnPosition;
import net.minecraft.util.math.BlockPos;

@ModuleInfo(name = "Disabler", description = "Allows you to disable some anticheats/anticheat checks.", category = ModuleCategory.EXPLOIT)
public class Disabler extends Module {

    private final ListValue modeValue = new ListValue("Mode", new String[]{"MineplexCombat", "LastCraft", "Verus", "VerusFull", "PingVerus", "VerusTP", "Ghostly", "Ghostly2", "CavePVP", "NaNPosY", "InfinitePosY", "NullBlockPlace", "Guardian", "Area51", "Iris"}, "MineplexCombat");

    private final IntegerValue antiVerusTpDelay = new IntegerValue("VerusTPDelay", 1000, 1, 3000);

    final MSTimer timer = new MSTimer();

    @Override
    public void onEnable() {
        switch (modeValue.get().toLowerCase()) {
            case "lastcraft":
                ClientUtils.displayChatMessage("§8[§1§lLastCraft-§b§lDisabler§8] §bJump in the void to disable anticheat.");
                break;
            case "verus":
                mc2.player.connection.sendPacket(new CPacketPlayerAbilities(mc2.player.capabilities));
                break;
            case "cavepvp":
                for (int i = 0; i < 20; i++) {
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                            mc.getThePlayer().getPosY() + 0.300001D, mc.getThePlayer().getPosZ(), false));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                            mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), false));
                }
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                        mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), false));
                mc.getThePlayer().getTicksExisted();
                break;
            case "verustp":
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                        mc.getThePlayer().getPosY() + 12D, mc.getThePlayer().getPosZ(), true));
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                        mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
            for (int i = 0; i < 10; i++) {
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                        mc.getThePlayer().getPosY() + 0.300001D, mc.getThePlayer().getPosZ(), false));
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                        mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
            }
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                        mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
            break;
            case "guardian":
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                        mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                        mc.getThePlayer().getPosY() + 12, mc.getThePlayer().getPosZ(), true));
            break;
        }
        super.onEnable();
    }

    @Override
    public void onDisable() {
        switch (modeValue.get().toLowerCase()) {
            case "iris":
                if (mc.getPlayerController().isNotCreative()) {
                    mc.getThePlayer().getCapabilities().setFlying(false);
                } else if (mc.getPlayerController().isInCreativeMode()) {
                    mc.getThePlayer().getCapabilities().setFlying(true);
                } else {
                    mc.getThePlayer().getCapabilities().setFlying(true);
                }
                mc.getThePlayer().getTicksExisted();
                MovementUtils.strafe(0F);
                mc.getThePlayer().setMotionX(0D);
                mc.getThePlayer().setMotionY(0D);
                mc.getThePlayer().setMotionZ(0D);
                mc.getTimer().setTimerSpeed(1F);
                mc.getThePlayer().setOnGround(false);
                mc.getThePlayer().setPositionAndUpdate(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ());
                break;
        }
        mc.getTimer().setTimerSpeed(1F);
        super.onDisable();
    }

    @EventTarget
    public void onUpdate(final UpdateEvent event) {
        switch (modeValue.get().toLowerCase()) {
            case "mineplexcombat":
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketKeepAlive());
                break;
            case "infiniteposy":
                mc.getThePlayer().getEntityBoundingBox().offset(0D, Double.MAX_VALUE, 0D);
                mc.getThePlayer().getEntityBoundingBox().offset(0D, Double.MIN_VALUE, 0D);
                break;
            case "nanposy":
                mc.getThePlayer().getEntityBoundingBox().offset(0D, Double.POSITIVE_INFINITY, 0D);
                mc.getThePlayer().getEntityBoundingBox().offset(0D, Double.NEGATIVE_INFINITY, 0D);
                break;
            case "iris":
                mc.getThePlayer().getCapabilities().setFlying(false);
                mc2.player.connection.sendPacket(new CPacketPlayerAbilities(mc2.player.capabilities));
                break;
            case "ghostly":
            case "pingverus":
                if (mc2.player.ticksExisted < 25) {
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketKeepAlive());
                }
                break;
            case "verus":
                mc2.player.connection.sendPacket(new CPacketPlayerAbilities(mc2.player.capabilities));
                mc2.player.connection.sendPacket(new CPacketInput(Float.MAX_VALUE, Float.MAX_VALUE, false, false));
                break;
            case "guardian":
            if (mc.getThePlayer().getTicksExisted() % 2 == 0) {
                mc.getThePlayer().setPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY() + 0.000001, mc.getThePlayer().getPosZ());
            }
            if (mc.getThePlayer().getTicksExisted() % 20 == 0) {
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                        mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                        mc.getThePlayer().getPosY() + 12D, mc.getThePlayer().getPosZ(), true));
            }
            break;
        case "ghostly2":
            if (mc.getThePlayer().getTicksExisted() < 25) {
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketKeepAlive());
            }
            if (mc.getThePlayer().getTicksExisted() % 2 == 0) {
                mc.getThePlayer().setPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY() + 0.000001, mc.getThePlayer().getPosZ());
            }
            if (mc.getThePlayer().getTicksExisted() % 20 == 0) {
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                        mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
                mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(),
                        mc.getThePlayer().getPosY() + 12D, mc.getThePlayer().getPosZ(), true));
            }
            break;
            case "verustp":
                if (timer.hasTimePassed(antiVerusTpDelay.get())) {
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(
                            mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY() + 12D, mc.getThePlayer().getPosZ(), true));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(
                            mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
                    timer.reset();
                }
                break;
            case "nullblockplace":
                mc.getNetHandler()
                        .addToSendQueue(classProvider.createCPacketPlayerBlockPlacement(
                                new WBlockPos(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY,
                                        Double.POSITIVE_INFINITY),
                                Integer.MAX_VALUE, null, Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY,
                                Float.POSITIVE_INFINITY));
                mc2.player.connection.sendPacket((Packet<?>) classProvider.createCPacketPlayerBlockPlacement(
                        new WBlockPos(mc2.player.posX, mc2.player.posY, mc2.player.posZ), 0, null, 0F, 0F, 0F));
                break;
        }
        super.onUpdate();
    }

    @EventTarget
    public void onPacket(final PacketEvent event) {
        final IPacket packet = event.getPacket();

        if (classProvider.isCPacketPlayer(packet)) {
            final ICPacketPlayer packetPlayer = packet.asCPacketPlayer();

            switch (modeValue.get().toLowerCase()) {
                case "lastcraft":
                    packetPlayer.setOnGround(false);
                    break;
                case "ghostly":
                    if (mc.getThePlayer().getTicksExisted() > 25) {
                        if (classProvider.isCPacketHandshake(event.getPacket())) {
                            event.cancelEvent();
                        }
                        if (classProvider.isCPacketKeepAlive(event.getPacket())) {
                            event.cancelEvent();
                        }
                        if (classProvider.isSPacketKeepAlive(event.getPacket())) {
                            event.cancelEvent();
                        }
                    }
                    break;
                case "area51":
                    if (mc.getThePlayer().getTicksExisted() > 25) {
                        if (classProvider.isCPacketHandshake(event.getPacket())) {
                            event.cancelEvent();
                        }
                        if (classProvider.isCPacketKeepAlive(event.getPacket())) {
                            event.cancelEvent();
                        }
                        if (classProvider.isSPacketKeepAlive(event.getPacket())) {
                            event.cancelEvent();
                        }
                    }
                    mc.getTimer().setTimerSpeed(0.2F);
                    break;
                case "verusfull":
                    if (classProvider.isSPacketKeepAlive(event.getPacket())
                            || classProvider.isCPacketKeepAlive(event.getPacket())
                            || classProvider.isCPacketHandshake(event.getPacket())) {
                        event.cancelEvent();
                    }
                    if (classProvider.isCPacketPlayer(event.getPacket())
                            || classProvider.isCPacketPlayerPosition(event.getPacket())
                            || classProvider.isCPacketPlayerLook(event.getPacket())
                            || classProvider.isCPacketPlayerPosLook(event.getPacket())) {
                        CPacketPlayer C03 = (CPacketPlayer) event.getPacket();
                        C03.y += Double.MIN_VALUE;
                        C03.onGround = true;
                    }
                    if (event.getPacket() instanceof SPacketPlayerAbilities) {
                        SPacketPlayerAbilities S39 = (SPacketPlayerAbilities) event.getPacket();
                        S39.setAllowFlying(true);
                        S39.setCreativeMode(true);
                        S39.setFlying(true);
                        S39.setInvulnerable(true);
                        S39.isAllowFlying();
                        S39.isCreativeMode();
                        S39.isFlying();
                        S39.isInvulnerable();
                    }
                    if (event.getPacket() instanceof CPacketPlayerAbilities) {
                        CPacketPlayerAbilities C13 = (CPacketPlayerAbilities) event.getPacket();
                        C13.setAllowFlying(true);
                        C13.setCreativeMode(true);
                        C13.setFlying(true);
                        C13.setInvulnerable(true);
                        C13.isAllowFlying();
                        C13.isCreativeMode();
                        C13.isFlying();
                        C13.isInvulnerable();
                    }
                    if (event.getPacket() instanceof SPacketSpawnPosition) {
                        event.cancelEvent();
                    }
                    break;
                case "guardian":
                    if (classProvider.isCPacketHandshake(event.getPacket())) {
                        event.cancelEvent();
                    }
                    break;
                case "ghostly2":
                    if (classProvider.isCPacketHandshake(event.getPacket())) {
                        event.cancelEvent();
                    }
                    if (classProvider.isCPacketKeepAlive(event.getPacket())) {
                        event.cancelEvent();
                    }
                    if (classProvider.isSPacketKeepAlive(event.getPacket())) {
                        event.cancelEvent();
                    }
                    break;
                case "iris": {
                    if (event.getPacket() instanceof SPacketPlayerAbilities) {
                        SPacketPlayerAbilities S39 = (SPacketPlayerAbilities) event.getPacket();
                        S39.setAllowFlying(true);
                        S39.setCreativeMode(true);
                        S39.setFlying(true);
                        S39.setInvulnerable(true);
                        S39.isAllowFlying();
                        S39.isCreativeMode();
                        S39.isFlying();
                        S39.isInvulnerable();
                    }
                    if (event.getPacket() instanceof CPacketPlayerAbilities) {
                        CPacketPlayerAbilities C13 = (CPacketPlayerAbilities) event.getPacket();
                        C13.setAllowFlying(true);
                        C13.setCreativeMode(true);
                        C13.setFlying(true);
                        C13.setInvulnerable(true);
                        C13.isAllowFlying();
                        C13.isCreativeMode();
                        C13.isFlying();
                        C13.isInvulnerable();
                    }
                }
                break;
                case "cavepvp":
                    if (classProvider.isCPacketHandshake(event.getPacket())) {
                        event.cancelEvent();
                    }
                    if (classProvider.isCPacketKeepAlive(event.getPacket())) {
                        event.cancelEvent();
                    }
                    if (classProvider.isSPacketKeepAlive(event.getPacket())) {
                        event.cancelEvent();
                    }
                    if (event.getPacket() instanceof SPacketPlayerAbilities) {
                        SPacketPlayerAbilities S39 = (SPacketPlayerAbilities) event.getPacket();
                        S39.setAllowFlying(true);
                        S39.setCreativeMode(true);
                        S39.setFlying(true);
                        S39.setInvulnerable(true);
                        S39.isAllowFlying();
                        S39.isCreativeMode();
                        S39.isFlying();
                        S39.isInvulnerable();
                    }
                    if (event.getPacket() instanceof CPacketPlayerAbilities) {
                        CPacketPlayerAbilities C13 = (CPacketPlayerAbilities) event.getPacket();
                        C13.setAllowFlying(true);
                        C13.setCreativeMode(true);
                        C13.setFlying(true);
                        C13.setInvulnerable(true);
                        C13.isAllowFlying();
                        C13.isCreativeMode();
                        C13.isFlying();
                        C13.isInvulnerable();
                    }
                    if (mc.getThePlayer().getTicksExisted() > 3) {
                        if (classProvider.isCPacketPlayer(event.getPacket())) {
                            CPacketPlayer C03 = (CPacketPlayer) event.getPacket();
                            C03.onGround = false;
                        }
                        break;
                    }
            }
        }
        super.onPacket();
    }
    @Override
    public String getTag() {
        return modeValue.get();
    }
}
